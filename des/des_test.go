package des

import (
	"testing"
)

func TestDES(t *testing.T) {
	var tests = []struct {
		key []byte
		in  []byte
		out []byte
	}{
		{
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0x8c, 0xa6, 0x4d, 0xe9, 0xc1, 0xb1, 0x23, 0xa7}},
		{
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x35, 0x55, 0x50, 0xb2, 0x15, 0x0e, 0x24, 0x51}},
		{
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x61, 0x7b, 0x3a, 0x0c, 0xe8, 0xf0, 0x71, 0x00}},
		{
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0x92, 0x31, 0xf2, 0x36, 0xff, 0x9a, 0xa9, 0x5c}},
		{
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0xca, 0xaa, 0xaf, 0x4d, 0xea, 0xf1, 0xdb, 0xae}},
		{
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x73, 0x59, 0xb2, 0x16, 0x3e, 0x4e, 0xdc, 0x58}},
		{
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x6d, 0xce, 0x0d, 0xc9, 0x00, 0x65, 0x56, 0xa3}},
		{
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0x9e, 0x84, 0xc5, 0xf3, 0x17, 0x0f, 0x8e, 0xff}},
		{
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0xd5, 0xd4, 0x4f, 0xf7, 0x20, 0x68, 0x3d, 0x0d}},
		{
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x59, 0x73, 0x23, 0x56, 0xf3, 0x6f, 0xde, 0x06}},
		{
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x56, 0xcc, 0x09, 0xe7, 0xcf, 0xdc, 0x4c, 0xef}},
		{
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0x12, 0xc6, 0x26, 0xaf, 0x05, 0x8b, 0x43, 0x3b}},
		{
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0xa6, 0x8c, 0xdc, 0xa9, 0x0c, 0x90, 0x21, 0xf9}},
		{
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x2a, 0x2b, 0xb0, 0x08, 0xdf, 0x97, 0xc2, 0xf2}},
		{
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0xed, 0x39, 0xd9, 0x50, 0xfa, 0x74, 0xbc, 0xc4}},
		{
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10},
			[]byte{0xa9, 0x33, 0xf6, 0x18, 0x30, 0x23, 0xb3, 0x10}},
		{
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
			[]byte{0x17, 0x66, 0x8d, 0xfc, 0x72, 0x92, 0x53, 0x2d}},
		{
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
			[]byte{0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},
			[]byte{0xb4, 0xfd, 0x23, 0x16, 0x47, 0xa5, 0xbe, 0xc0}},
		{
			[]byte{0x0e, 0x32, 0x92, 0x32, 0xea, 0x6d, 0x0d, 0x73},
			[]byte{0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{
			[]byte{0x73, 0x65, 0x63, 0x52, 0x33, 0x74, 0x24, 0x3b}, // "secR3t$;"
			[]byte{0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32}, // "a test12"
			[]byte{0x37, 0x0d, 0xee, 0x2c, 0x1f, 0xb4, 0xf7, 0xa5}},
		{
			[]byte{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68}, // "abcdefgh"
			[]byte{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68}, // "abcdefgh"
			[]byte{0x2a, 0x8d, 0x69, 0xde, 0x9d, 0x5f, 0xdf, 0xf9}},
		{
			[]byte{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68}, // "abcdefgh"
			[]byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38}, // "12345678"
			[]byte{0x21, 0xc6, 0x0d, 0xa5, 0x34, 0x24, 0x8b, 0xce}},
		{
			[]byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38}, // "12345678"
			[]byte{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68}, // "abcdefgh"
			[]byte{0x94, 0xd4, 0x43, 0x6b, 0xc3, 0xb5, 0xb6, 0x93}},
		{
			[]byte{0x1f, 0x79, 0x90, 0x5f, 0x88, 0x01, 0xc8, 0x88}, // random
			[]byte{0xc7, 0x46, 0x18, 0x73, 0xaf, 0x48, 0x5f, 0xb3}, // random
			[]byte{0xb0, 0x93, 0x50, 0x88, 0xf9, 0x92, 0x44, 0x6a}},
		{
			[]byte{0xe6, 0xf4, 0xf2, 0xdb, 0x31, 0x42, 0x53, 0x01}, // random
			[]byte{0xff, 0x3d, 0x25, 0x50, 0x12, 0xe3, 0x4a, 0xc5}, // random
			[]byte{0x86, 0x08, 0xd3, 0xd1, 0x6c, 0x2f, 0xd2, 0x55}},
		{
			[]byte{0x69, 0xc1, 0x9d, 0xc1, 0x15, 0xc5, 0xfb, 0x2b}, // random
			[]byte{0x1a, 0x22, 0x5c, 0xaf, 0x1f, 0x1d, 0xa3, 0xf9}, // random
			[]byte{0x64, 0xba, 0x31, 0x67, 0x56, 0x91, 0x1e, 0xa7}},
		{
			[]byte{0x6e, 0x5e, 0xe2, 0x47, 0xc4, 0xbf, 0xf6, 0x51}, // random
			[]byte{0x11, 0xc9, 0x57, 0xff, 0x66, 0x89, 0x0e, 0xf0}, // random
			[]byte{0x94, 0xc5, 0x35, 0xb2, 0xc5, 0x8b, 0x39, 0x72}},
	}

	for _, test := range tests {
		result, err := DesEncrypt(test.in, test.key)
		if err != nil {
			t.Error("DES encrypt data error: ", err)
		}

		t.Logf("%#v", result)

		oridData, err := DesDecrypt(result, test.key)
		if err != nil {
			t.Error("DES decrypt data error: ", err)
		}
		t.Logf("%#v", oridData)

	}
}

func Test3DES(t *testing.T) {
	var tests = []struct {
		key []byte
		in  []byte
		out []byte
	}{
		{
			[]byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0x92, 0x95, 0xb5, 0x9b, 0xb3, 0x84, 0x73, 0x6e}},
		{
			[]byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0xc1, 0x97, 0xf5, 0x58, 0x74, 0x8a, 0x20, 0xe7}},
		{
			[]byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			[]byte{0x3e, 0x68, 0x0a, 0xa7, 0x8b, 0x75, 0xdf, 0x18}},
		{
			[]byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			[]byte{0x6d, 0x6a, 0x4a, 0x64, 0x4c, 0x7b, 0x8c, 0x91}},
		{
			[]byte{ // "abcdefgh12345678ABCDEFGH"
				0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
				0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
				0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48},
			[]byte{0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}, // "00000000"
			[]byte{0xe4, 0x61, 0xb7, 0x59, 0x68, 0x8b, 0xff, 0x66}},
		{
			[]byte{ // "abcdefgh12345678ABCDEFGH"
				0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
				0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
				0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48},
			[]byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38}, // "12345678"
			[]byte{0xdb, 0xd0, 0x92, 0xde, 0xf8, 0x34, 0xff, 0x58}},
		{
			[]byte{ // "abcdefgh12345678ABCDEFGH"
				0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
				0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
				0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48},
			[]byte{0xf0, 0xc5, 0x82, 0x22, 0xd3, 0xe6, 0x12, 0xd2}, // random
			[]byte{0xba, 0xe4, 0x41, 0xb1, 0x3c, 0x37, 0x4d, 0xf4}},
		{
			[]byte{ // random
				0xd3, 0x7d, 0x45, 0xee, 0x22, 0xe9, 0xcf, 0x52,
				0xf4, 0x65, 0xa2, 0x4f, 0x70, 0xd1, 0x81, 0x8a,
				0x3d, 0xbe, 0x2f, 0x39, 0xc7, 0x71, 0xd2, 0xe9},
			[]byte{0x49, 0x53, 0xc3, 0xe9, 0x78, 0xdf, 0x9f, 0xaf}, // random
			[]byte{0x53, 0x40, 0x51, 0x24, 0xd8, 0x3c, 0xf9, 0x88}},
		{
			[]byte{ // random
				0xcb, 0x10, 0x7d, 0xda, 0x7e, 0x96, 0x57, 0x0a,
				0xe8, 0xeb, 0xe8, 0x07, 0x8e, 0x87, 0xd3, 0x57,
				0xb2, 0x61, 0x12, 0xb8, 0x2a, 0x90, 0xb7, 0x2f},
			[]byte{0xa3, 0xc2, 0x60, 0xb1, 0x0b, 0xb7, 0x28, 0x6e}, // random
			[]byte{0x56, 0x73, 0x7d, 0xfb, 0xb5, 0xa1, 0xc3, 0xde}},
	}

	for _, test := range tests {
		result, err := TripleDesEncrypt(test.in, test.key)
		if err != nil {
			t.Error("DES encrypt data error: ", err)
		}

		t.Logf("%#v\n", result)

		oridData, err := TripleDesDecrypt(result, test.key)
		if err != nil {
			t.Error("DES decrypt data error: ", err)
		}

		t.Logf("%#v\n", oridData)
	}
}

//Output:
// == RUN TestDES
// --- PASS: TestDES (0.00s)
// 	des_test.go:129: []byte{0x8c, 0xa6, 0x4d, 0xe9, 0xc1, 0xb1, 0x23, 0xa7, 0x4f, 0xd, 0x3, 0xf9, 0x5b, 0xba, 0x2a, 0x6b}
// 	des_test.go:135: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
// 	des_test.go:129: []byte{0x35, 0x55, 0x50, 0xb2, 0x15, 0xe, 0x24, 0x51, 0x69, 0x64, 0xc1, 0x84, 0x6e, 0xd1, 0x8f, 0xab}
// 	des_test.go:135: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
// 	des_test.go:129: []byte{0x61, 0x7b, 0x3a, 0xc, 0xe8, 0xf0, 0x71, 0x0, 0x2b, 0x5f, 0xd5, 0x59, 0xf1, 0x6, 0x40, 0x6b}
// 	des_test.go:135: []byte{0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}
// 	des_test.go:129: []byte{0x92, 0x31, 0xf2, 0x36, 0xff, 0x9a, 0xa9, 0x5c, 0x47, 0xeb, 0x88, 0xc8, 0xd6, 0xe3, 0x96, 0x5b}
// 	des_test.go:135: []byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10}
// 	des_test.go:129: []byte{0x73, 0x59, 0xb2, 0x16, 0x3e, 0x4e, 0xdc, 0x58, 0xb0, 0xf2, 0xfc, 0x6, 0xa4, 0x45, 0xd5, 0x94}
// 	des_test.go:135: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
// 	des_test.go:129: []byte{0xca, 0xaa, 0xaf, 0x4d, 0xea, 0xf1, 0xdb, 0xae, 0x96, 0x9b, 0x3e, 0x7b, 0x91, 0x2e, 0x70, 0x54}
// 	des_test.go:135: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
// 	des_test.go:129: []byte{0x9e, 0x84, 0xc5, 0xf3, 0x17, 0xf, 0x8e, 0xff, 0xd4, 0xa0, 0x2a, 0xa6, 0xe, 0xf9, 0xbf, 0x94}
// 	des_test.go:135: []byte{0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}
// 	des_test.go:129: []byte{0x6d, 0xce, 0xd, 0xc9, 0x0, 0x65, 0x56, 0xa3, 0xb8, 0x14, 0x77, 0x37, 0x29, 0x1c, 0x69, 0xa4}
// 	des_test.go:135: []byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10}
// 	des_test.go:129: []byte{0x56, 0xcc, 0x9, 0xe7, 0xcf, 0xdc, 0x4c, 0xef, 0x9c, 0x94, 0x34, 0xb8, 0x6c, 0x53, 0x1b, 0x57}
// 	des_test.go:135: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
// 	des_test.go:129: []byte{0x12, 0xc6, 0x26, 0xaf, 0x5, 0x8b, 0x43, 0x3b, 0x6f, 0x98, 0x4e, 0xfc, 0xaa, 0xf1, 0x9f, 0x14}
// 	des_test.go:135: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
// 	des_test.go:129: []byte{0xd5, 0xd4, 0x4f, 0xf7, 0x20, 0x68, 0x3d, 0xd, 0xd4, 0x11, 0x77, 0xbb, 0x2a, 0xa9, 0x74, 0x2f}
// 	des_test.go:135: []byte{0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}
// 	des_test.go:129: []byte{0x59, 0x73, 0x23, 0x56, 0xf3, 0x6f, 0xde, 0x6, 0x24, 0x53, 0x16, 0x58, 0x2d, 0xd3, 0x62, 0x55}
// 	des_test.go:135: []byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10}
// 	des_test.go:129: []byte{0xa9, 0x33, 0xf6, 0x18, 0x30, 0x23, 0xb3, 0x10, 0x63, 0x6b, 0xcb, 0x47, 0x93, 0xac, 0xe4, 0xa8}
// 	des_test.go:135: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
// 	des_test.go:129: []byte{0xed, 0x39, 0xd9, 0x50, 0xfa, 0x74, 0xbc, 0xc4, 0x90, 0x67, 0xb1, 0x3, 0x55, 0xe, 0x60, 0xeb}
// 	des_test.go:135: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
// 	des_test.go:129: []byte{0x2a, 0x2b, 0xb0, 0x8, 0xdf, 0x97, 0xc2, 0xf2, 0x2b, 0xee, 0x88, 0x44, 0xd5, 0x56, 0x8b, 0xd0}
// 	des_test.go:135: []byte{0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}
// 	des_test.go:129: []byte{0xa6, 0x8c, 0xdc, 0xa9, 0xc, 0x90, 0x21, 0xf9, 0xdb, 0xac, 0xe9, 0xa7, 0xd2, 0x2c, 0x9d, 0xaa}
// 	des_test.go:135: []byte{0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10}
// 	des_test.go:129: []byte{0x16, 0xfb, 0xa5, 0xaf, 0xfc, 0xf, 0x66, 0xbb, 0x56, 0x34, 0x6b, 0x20, 0xbd, 0x78, 0xb0, 0x6a}
// 	des_test.go:135: []byte{0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11}
// 	des_test.go:129: []byte{0xe0, 0x15, 0x39, 0xbf, 0xea, 0x6e, 0xc1, 0x8f, 0x92, 0x10, 0xbb, 0xc0, 0xec, 0xa4, 0x37, 0xc1}
// 	des_test.go:135: []byte{0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}
// 	des_test.go:129: []byte{0x5c, 0x9f, 0xf3, 0x73, 0xc, 0xc7, 0xd7, 0x84, 0xb2, 0xb8, 0x27, 0x24, 0xf7, 0x55, 0x34, 0xe4}
// 	des_test.go:135: []byte{0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87}
// 	des_test.go:129: []byte{0x12, 0x1b, 0xc6, 0x3f, 0x17, 0xd6, 0x9b, 0x15, 0x8b, 0xe, 0xca, 0x26, 0x4f, 0x67, 0x8a, 0x79}
// 	des_test.go:135: []byte{0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32}
// 	des_test.go:129: []byte{0xea, 0xe5, 0xfe, 0xe8, 0x6, 0x5b, 0x2d, 0x3a, 0x4e, 0xa, 0x5, 0xe, 0x86, 0xa8, 0x59, 0x35}
// 	des_test.go:135: []byte{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68}
// 	des_test.go:129: []byte{0x26, 0x85, 0x1b, 0x1f, 0x1f, 0x2d, 0x88, 0x4d, 0xe0, 0x5d, 0x1d, 0xf9, 0x9f, 0xbe, 0xa6, 0xff}
// 	des_test.go:135: []byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38}
// 	des_test.go:129: []byte{0x51, 0x43, 0x50, 0x2a, 0x93, 0xbf, 0x57, 0x93, 0xea, 0x21, 0x3e, 0x94, 0xb4, 0x21, 0x22, 0x94}
// 	des_test.go:135: []byte{0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68}
// 	des_test.go:129: []byte{0x12, 0xad, 0xa4, 0x48, 0x48, 0x69, 0x11, 0xe, 0x6c, 0x1b, 0x8, 0x6b, 0x3a, 0xad, 0xe0, 0x1d}
// 	des_test.go:135: []byte{0xc7, 0x46, 0x18, 0x73, 0xaf, 0x48, 0x5f, 0xb3}
// 	des_test.go:129: []byte{0x43, 0x3b, 0xc3, 0xbc, 0x72, 0xe7, 0x28, 0xfa, 0xc, 0xde, 0x87, 0xc3, 0xde, 0x20, 0x9f, 0x18}
// 	des_test.go:135: []byte{0xff, 0x3d, 0x25, 0x50, 0x12, 0xe3, 0x4a, 0xc5}
// 	des_test.go:129: []byte{0xd8, 0x1, 0xa1, 0x3, 0x14, 0xf9, 0x7d, 0x75, 0xab, 0xaa, 0x6e, 0xc4, 0xd1, 0x7d, 0x3e, 0x62}
// 	des_test.go:135: []byte{0x1a, 0x22, 0x5c, 0xaf, 0x1f, 0x1d, 0xa3, 0xf9}
// 	des_test.go:129: []byte{0x79, 0x5a, 0x98, 0x97, 0x23, 0x47, 0x2a, 0xd2, 0x5e, 0x58, 0x96, 0xb4, 0xe8, 0xde, 0x91, 0xfd}
// 	des_test.go:135: []byte{0x11, 0xc9, 0x57, 0xff, 0x66, 0x89, 0xe, 0xf0}
// === RUN Test3DES
// --- PASS: Test3DES (0.00s)
// 	des_test.go:217: []byte{0x92, 0x95, 0xb5, 0x9b, 0xb3, 0x84, 0x73, 0x6e, 0x20, 0xdc, 0x99, 0x42, 0x61, 0xf5, 0xdb, 0xf9}
// 	des_test.go:224: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
// 	des_test.go:217: []byte{0xc1, 0x97, 0xf5, 0x58, 0x74, 0x8a, 0x20, 0xe7, 0xf5, 0x99, 0x31, 0xab, 0x58, 0xd0, 0x8e, 0xb1}
// 	des_test.go:224: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
// 	des_test.go:217: []byte{0x6d, 0x6a, 0x4a, 0x64, 0x4c, 0x7b, 0x8c, 0x91, 0xdf, 0x23, 0x66, 0xbd, 0x9e, 0xa, 0x24, 0x6}
// 	des_test.go:224: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
// 	des_test.go:217: []byte{0x3e, 0x68, 0xa, 0xa7, 0x8b, 0x75, 0xdf, 0x18, 0xa, 0x66, 0xce, 0x54, 0xa7, 0x2f, 0x71, 0x4e}
// 	des_test.go:224: []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
// 	des_test.go:217: []byte{0x10, 0xec, 0x33, 0x3b, 0xa7, 0xe6, 0x66, 0xd6, 0xbc, 0x20, 0xcc, 0xfa, 0x2d, 0xcf, 0x46, 0x85}
// 	des_test.go:224: []byte{0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30}
// 	des_test.go:217: []byte{0x2, 0x88, 0xa7, 0xa3, 0x42, 0x4e, 0x83, 0xc1, 0x77, 0xb8, 0x8c, 0xb8, 0xfa, 0xaa, 0x71, 0x7c}
// 	des_test.go:224: []byte{0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38}
// 	des_test.go:217: []byte{0xb4, 0xd6, 0x4e, 0x73, 0xb7, 0xaf, 0xf2, 0x47, 0xad, 0x8c, 0x78, 0x1a, 0xc0, 0x26, 0x29, 0x4e}
// 	des_test.go:224: []byte{0xf0, 0xc5, 0x82, 0x22, 0xd3, 0xe6, 0x12, 0xd2}
// 	des_test.go:217: []byte{0xb8, 0xac, 0x7b, 0xbe, 0x7c, 0x21, 0x53, 0xa6, 0xf2, 0x78, 0x6, 0xa1, 0x43, 0xc8, 0x48, 0x82}
// 	des_test.go:224: []byte{0x49, 0x53, 0xc3, 0xe9, 0x78, 0xdf, 0x9f, 0xaf}
// 	des_test.go:217: []byte{0x4, 0xcc, 0x9f, 0xc0, 0xae, 0xb4, 0x7f, 0x40, 0xe7, 0xa6, 0x49, 0x84, 0xb5, 0xd6, 0xc5, 0xc8}
// 	des_test.go:224: []byte{0xa3, 0xc2, 0x60, 0xb1, 0xb, 0xb7, 0x28, 0x6e}
// PASS
// ok  	github.com/xigang/crypto/des	0.012s
